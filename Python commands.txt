#!/usr/local/bin/python3.5  -----> Shebang Tells the system which interpreter to use to execute the file

# Look Inside a module:
import module
dir(module)

# Set a path
import sys
sys.path.append('/usr/etc/etc')

#!/usr/bin/env python3
print('Hello')


-----------------------

chmod +x hello.py

Execute:
 ./hello.py
 python3 hello.py

OR

chmod 777 hello.py

------------------------------
 Upgrading Python 3 from source	

https://www.python.org/downloads/source/

Then download and untar the tarball; for example for

https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz

The process for untarring the tgz file is:

tar -xvzf /path/to/yourfile.tgz

Once you are in the file path the file was unzipped to, run:

./configure
make
make install

----------------------------------------

- Update pip3

- sudo pip3 install --upgrade pip
- sudo pip install --upgrade setuptools
- /usr/bin/python3 -m pip install --upgrade pip

--------------------------------------------------

Installing a package

download Tar file
Uncompress
look for setup.py file

setup.py is a python file, which usually tells you that the module/package you are about to install have been packaged and distributed with Distutils, which is the standard for distributing Python Modules.

This allows you to easily install Python packages, often it's enough to write:

python setup.py install

and the module will install itself.

------------------------------------------
If we use the raw_input function in Python 2.x or the input function in Python 3, the result is
always a string

x = int(raw_input("Input an integer: "))
y = float(raw_input("Input a float: "))
print x, y
--------------------------------------------

pip3 install ipcalc
pip3 install six

#!/usr/bin/env python3.8
 import ipcalc
   for x in ipcalc.Network('172.16.42.0/30'):
...     print str(x)
...
172.16.42.1
172.16.42.2
>>> subnet = ipcalc.Network('2001:beef:babe::/48')
>>> print str(subnet.network())
2001:beef:babe:0000:0000:0000:0000:0000
>>> print str(subnet.netmask())
ffff:ffff:ffff:0000:0000:0000:0000:0000
>>> '192.168.42.23' in Network('192.168.42.0/24')
True
>>> long(IP('fe80::213:ceff:fee8:c937'))
338288524927261089654168587652869703991L

 --------------------------------------------------------
To Add a directory in Python path:

>>> import sys
>>> sys.path.append('/ufs/guido/lib/python')

>>> import sys
>>> sys.path
['', '/usr/local/lib/python25.zip', '/usr/local/lib/python2.5', ... ]

apt-get install python3-pip
pip freeze ----> shows all the packages installed by pip

------------------------------------------------------------------------
 
Installing Python packages from source

Read README.tx or INSTALL.txt

python3 setup.py build
python3 setup.py install

-------------------------------------------------------------------
Retrieving Python Module path:

import <module>
import inspect
inspect.getfile(<module>)

-----------------------------------------------------------
Adding a module to the Python default directory

import sys
sys.path
sys.path.append('/path/to/the/module')
look for :

 /usr/lib/python3.6/site-packages

Install files there

--------------------------------------------------------------------
 
Code Runner (Extension of Visual Studio Code 

o run code:

    use shortcut Ctrl+Alt+N
    or press F1 and then select/type Run Code,
    or right click the Text Editor and then click Run Code in editor context menu
    or click Run Code button in editor title menu
    or click Run Code button in context menu of file explorer

To stop the running code:

    use shortcut Ctrl+Alt+M
    or press F1 and then select/type Stop Code Run
    or right click the Output Channel and then click Stop Code Run in context menu

To restart a program: ctrl/shift/F5

------------------------------------------------------------------------------
 
Windows Bash

cd /mnt

c  d

cd c

-------------------------------------------------------

LAMBDA USE:

 You can build a function in the normal way, using def, like this:

def square_root(x): return math.sqrt(x)

or you can use lambda:

square_root = lambda x: math.sqrt(x)

So, although we could code (say)

def __init__(self, parent):
    """Constructor"""
    frame = tk.Frame(parent)
    frame.pack()

    btn22 = tk.Button(frame,
        text="22", command=self.buttonCmd22)
    btn22.pack(side=tk.LEFT)

    btn44 = tk.Button(frame,
        text="44", command=self.buttonCmd44)
    btn44.pack(side=tk.LEFT)

def buttonCmd22(self):
    self.printNum(22)

def buttonCmd44(self):
    self.printNum(44)

it is much easier (and clearer) to code

def __init__(self, parent):
    """Constructor"""version
    frame = tk.Frame(parent)
    frame.pack()

    btn22 = tk.Button(frame,
        text="22", command=lambda: self.printNum(22))
    btn22.pack(side=tk.LEFT)

    btn44 = tk.Button(frame,
        text="44", command=lambda: self.printNum(44))
    btn44.pack(side=tk.LEFT)
--------------------------------------------------------------------------------

(tutorial-env) $ pip search astronomy
skyfield               - Elegant astronomy for Python
gary                   - Galactic astronomy and gravitational dynamics.
novas                  - The United States Naval Observatory NOVAS astronomy library
astroobs               - Provides astronomy ephemeris to plan telescope observations
PyAstronomy            - A collection of astronomy related tools for Python.

---------------------------------------------------------------------------
 
- Test: python3  -V

--------------------------------------------------------------------------------------------

ansible -i /etc/ansible/hosts testing -m command -a 'sudo sed -i '/MONITORING_Remote_Routes/a up route add -net 11.111.1.11 netmask 255.255.255.192 gw 10.110.1.65' /etc/network/interfaces' -u administrator



network.yaml
---
- hosts: testing
  tasks:
    - name: Adds Static Routes
      command:
         script.sh

ansible-playbook network.yml -i /etc/ansible/hosts

add ssh keys 

 ansible-playbook --ask-sudo-pass test.yml

--------------------------------------------------

---
- name: "Add Static Routes"
  hosts: testing
  remote_user: administrator
  become: true
  tasks:
     - name: Execute command
       shell: sed -i '/MONITORING_Remote_Routes/a TEST ROUTE2' /etc/network/interfaces
-------------------------------------------------------------------
 VIRTUAL ENVIRONMENTS

- Installing Venv

apt install -y python3-venv

- Create Venv

root@ubuntu:~# mkdir vir_env ----> Subdirectory with all VEs
root@ubuntu:~# cd vir_env---------> mode to vir_env
root@ubuntu:~/vir_env# sudo python3 -m venv Project 

- Activate Venv

$ source /home/oscar/Python/vir_env/test1/bin/activate



- Deactivate:

 (env)$deactivate

- Install libraries

- Create a venv with system packages

Create the virtual environment without the --system-site-packages switch. 
After the environment was created go to the folder the environment was created in. It should have a file pyvenv.cfg. Edit this file. It has (among other text) a line

include-system-site-packages = false

Change this line to:

include-system-site-packages = true

Activate the environment. Module installations will now go to the virtual environment and the system site packages are visible too.

--------------------------------------------------------------------

Defining shebang for Venv

(Venv) $ which python3

#!/home/oscar/Python/vir_env/test1/bin/python3

------------------------------------------------------------------
Make sure folder is owned by osccar:
 
sudo chown -R oscar /path/to/working/directory

-Delete a venv

 rm -r venv/


------------------------------------------------------------------
Upgrading a package

pip3 install colorama --upgrade

---------------------------------------------------------------------

Installing pyATS

- create Venv
- cd venv
- sudo pip3 install --upgrade pip
- sudo pip install --upgrade setuptools
- sudo pip install pyats[full] ---------------------> better

sudo pip3 install pyats[full] -t /home/devnet/Pyats/DevOps/acl_edit/lib/python3.10/site-packages/ ---> directly on Venv

-t, --target <dir>          Install packages into <dir>. By default this will not replace existing files/folders in <dir>. Use --upgrade to replace existing packages in <dir> with new versions.


pyats version check -->verify if pyats is running normally

pyats version check --outdated ----> looks for packages thet need to be upgraded

pyats version update ------> update current pyATS installation to another version

If upgrade is needed:

pip install pyats[library] --upgrade
pip install pyats.contrib --upgrade

    pip3 install --upgrade genie genie.libs.clean genie.libs.conf
    pip3 install --upgrade genie.libs.filetransferutils genie.libs.health genie.libs.ops
    pip3 install --upgrade genie.libs.parser genie.libs.sdk pyats
    pip3 install --upgrade pyats.aereport pyats.aetest pyats.async
    pip3 install --upgrade pyats.connections pyats.datastructures pyats.easypy
    pip3 install --upgrade pyats.kleenex pyats.log pyats.reporter
    pip3 install --upgrade pyats.results pyats.tcl pyats.topology
    pip3 install --upgrade pyats.utils unicon unicon.plugins




pyats validate testbed testbed.yaml

pyats learn ospf interface --testbed-file tb.yaml --output today

pyats diff today/ yesterday/

------------------------------------------------------------------------------------

administrator@DevNet-01:~/pyats/lab1$ pyats --help
Usage:
  pyats <command> [options]

Commands:
    clean               runs the provided clean file
    create              create scripts and libraries from template
    diff                Command to diff two snapshots saved to file or directory
    dnac                Command to learn DNAC features and save to file (Prototype)
    learn               Command to learn device features and save to file
    logs                command enabling log archive viewing in local browser
    parse               Command to parse show commands
    run                 runs the provided script and output corresponding results.
    secret              utilities for working with secret strings.
    shell               enter Python shell, loading a pyATS testbed file and/or pickled data
    validate            utlities that helps to validate input files
    version             commands related to version display and manipulation

--------------------------------------------------------------------------------------------------

pyats parse "show mac address-table" --testbed-file uwaco_testbed.yml --output PRE 	Execute the "show MAC address-table" command on the device or devices in my testbed file and save the structured and unstructured output in a subdirectory alley PRE
pyats parse "show mac address-table" --testbed-file uwaco_testbed.yml --output POST 	Same but save this output in a subdirectory called POST
pyats diff PRE POST 	                                                                Compare and output the differences in standard Unix Diff format.

---------------------------------------------------------------------------------------------------

pyats learn < Model> --testbed-file testbed1.yaml ----> See Genie models list https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/models

pyats learn platform --testbed-file testbed1.yaml --devices GE_HUB1_INT_HRT1.MIR ----> Sh ver

pyats parse "show interfaces description" --testbed-file testbed1.yaml --devices CSR1k-MIR_01.rt --output CSR1K/POST

pyats logs view /path/to/archive.zip

+=========================================================================================================================>
| Commands for learning feature 'Platform'                                                                                >
+=========================================================================================================================>
| - Parsed commands                                                                                                       >
|------------------------------------------------------------------------------------------------------------------------->
|   cmd: <class 'genie.libs.parser.iosxe.show_platform.ShowVersion'>                                                      >
|   cmd: <class 'genie.libs.parser.iosxe.show_platform.Dir'>                                                              >
|   cmd: <class 'genie.libs.parser.iosxe.show_platform.ShowRedundancy'>                                                   >
|   cmd: <class 'genie.libs.parser.iosxe.show_platform.ShowInventory'>                                                    >
|   cmd: <class 'genie.libs.parser.iosxe.show_issu.ShowIssuRollbackTimer'>                                                >
|   cmd: <class 'genie.libs.parser.iosxe.show_platform.ShowPlatform'>                                                     >
|   cmd: <class 'genie.libs.parser.iosxe.show_issu.ShowIssuStateDetail'>                                                  >
|=========================================================================================================================>

pyats.conf location: /home/administrator/.pyats/
-----------------------------------------------------------------------------------------------------------------------

Logging

# Example
# -------
#
#   attaching TaskLogHandler to root logger, enabling all log messages to be
#   logged to a particular file, and then changing the file to log to

import logging
from pyats.log import TaskLogHandler

# get the root logger
logger = logging.getLogger(__name__)

# create handler (with full path to log file)
handler = TaskLogHandler('/path/to/my/TaskLog-A.log')

# add handler to logger
logger.addHandler(handler)

# set logging level a bit lower to enable INFO
logger.setLevel(logging.INFO)

# now try logging
logger.info('an info message')

# get current log directory and file
logdir = handler.logdir
logfile = handler.logfile

Logging Levels

Python logging natively offers 5 logging levels:

        critical

        error

        warning

        info

        debug

At any time, logging level can be set using setLevel API:

# Example
# -------
#
#   setting logger level
#
#   available levels:
#       logging.INFO
#       logging.CRITICAL
#       logging.ERROR
#       logging.WARNING
#       logging.DEBUG

import logging

logger = logging.getLogger(__name__)

logger.setLevel(logging.INFO)

--------------------------------------------------------------------
Encoding pw on testbed fike

Using the default YAML encoding key since no key was specified in configuration.

THIS IS A SHARED KEY AND IS NOT SECURE, PLEASE RUN `pyats secret keygen` AND ADD TO YOUR pyats.conf FILE BEFORE ENCODING ANY VALUES.

--------------------------------------------------------------------------------

Debugging:

session.sendline('sh ver | inc Version')

i = 0
    for element in version_output_lines:
        print("\n Element %i = %s" % (i, version_output_lines[i]))
        i+=1
osc = input()

 
----------------------------------------------------------------------------------

Installing ipython3

sudo apt-get install -y ipython3






